# AI Context Document - New Chat Protocol Initiation
Date: Thu 04/17/2025 4:58:01.68

## Overview

This document summarizes the system state and context established following the `speciality/new_chat_protocol.mdc` as of the date/time above. It incorporates findings from the previous `old_chat_protocol` execution summary and the latest chat context. The primary goal is to provide a current snapshot for guiding next steps.

## Project Structure & Key Components

The project facilitates user-created AI agents interacting on Discord. Key components include:

*   **Frontend (React/Vite/Tailwind):** (`src/`) User interface for agent configuration and activation/deactivation.
*   **Backend (Supabase):** Database (`agents`, `agent_discord_connections`), Auth, Edge Functions (`supabase/functions/`).
    *   `manage-discord-worker`: Called by UI to start/stop workers via the worker-manager.
    *   `discord-interaction-handler`: Handles incoming Discord interactions (commands, etc.).
    *   `register-agent-commands`: Registers necessary Discord slash commands.
    *   `chat`: (Purpose inferred) Likely handles message relay/processing.
*   **Worker Services (Node.js/TypeScript):** (`services/`)
    *   `worker-manager`: (`services/worker-manager/`) Manages worker processes using PM2's programmatic API. Listens for start/stop requests.
    *   `discord-worker`: (`services/discord-worker/`) Individual Discord bot instances connecting to the Discord Gateway, managed by `worker-manager`. Uses `supabase.rpc('update_worker_status', ...)` for status updates.
*   **Database Function:** `public.update_worker_status` (PostgreSQL `SECURITY DEFINER`) allows workers (using anon key) to update their status in `agent_discord_connections` despite RLS.
*   **Configuration:** `package.json`, `.env` (root), `tsconfig*.json`, Vite/PostCSS/Tailwind configs, `ecosystem.config.js` (for PM2 within `worker-manager`).
*   **Documentation:** `README.md`, `docs/index.md`, `docs/context/`, `docs/bugs/`, `.cursor/rules/`.

## Analysis Findings (New Chat Protocol)

*   **Checklists:** Template found at `docs/context/checklists/checklist_template.md`. New checklist `docs/context/checklists/checklist_2025-04-17.mdc` created. Old checklist `checklist_2025_04_14.md` exists.
*   **Context Docs:** Previous context doc `docs/context/ai_context_2025_04_14_05_56_37.md` reviewed.
*   **Core Files/DB Schema:** Reviewed and understood based on previous context and recent conversation history (RLS fixes, PM2 integration, `update_worker_status` function).
*   **API Endpoints/Entry Points:**
    *   UI (Vite dev server)
    *   Supabase Edge Functions (HTTP triggers from UI/Discord)
    *   `worker-manager` service (PM2-managed Node server, likely receives HTTP from Supabase)
    *   `discord-worker` (PM2-managed Node client, connects outbound to Discord Gateway)
*   **Logs (`docs/console/logs/`):** Directory **missing**. Rule #2 requires logs here. Recent logs were temporarily placed in `logs.txt`. Standard logging needs implementation.
*   **Bugs (`docs/bugs/`):** Contains `discord-interaction-handler.md`, which holds Supabase logs for that function, showing PING handling and some prior "Bad Request: Interaction secret missing..." errors (potentially resolved). No other formal bug reports found.

## Current State & Recent Progress (from Conversation History)

*   Agent activation workflow (UI -> Supabase Function -> Worker Manager (PM2) -> Discord Worker) is functional.
*   RLS issues preventing worker status updates were resolved using the `update_worker_status` SECURITY DEFINER function and RPC calls from the worker.
*   `worker-manager` now correctly uses the PM2 API (`pm2.start`) to launch `discord-worker` instances using `ts-node`.
*   RLS was **disabled** on `agent_discord_connections` and `agents` tables during testing.

## Discrepancies & Potential Issues

*   **Missing Log Directory:** Violation of RULE #2.
*   **RLS Disabled:** RLS needs to be re-enabled on `agent_discord_connections` and potentially reviewed/re-enabled for `agents`.
*   **Temporary Logs:** Diagnostic logs added during troubleshooting (e.g., `console.log(process.env)` in `worker.ts`) may need cleanup.

## Entry Points Summary

*   **User Interface:** Web Application (`index.html` -> `page.tsx`)
*   **External Triggers:** Discord Webhooks -> `supabase/functions/discord-interaction-handler/`
*   **Internal Service Calls:**
    *   UI -> `supabase/functions/manage-discord-worker/`
    *   `discord-interaction-handler` -> `worker-manager` service endpoint
    *   `manage-discord-worker` -> `worker-manager` service endpoint
    *   `worker-manager` -> `discord-worker` (via PM2 API)
    *   `discord-worker` -> Supabase DB (via `update_worker_status` RPC)

## Next Steps (Immediate from Conversation History)

1.  **Re-enable RLS:** In Supabase dashboard for `agent_discord_connections`. The `SECURITY DEFINER` function should maintain functionality.
2.  **Verify Deactivation:** Test the UI deactivation flow thoroughly.
3.  **Code Cleanup (Optional):** Remove temporary diagnostic logs.
4.  **Review RLS (`agents` table):** Decide if RLS is needed and implement appropriate policies.
5.  **Establish Logging:** Create `docs/console/logs/` and implement proper logging in services/functions.

---
Generated by AI Assistant following `speciality/new_chat_protocol.mdc` at Thu 04/17/2025 4:58:01.68 