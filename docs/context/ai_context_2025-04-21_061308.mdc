# AI Context Document - New Chat Protocol Initiation
Date: Mon 04/21/2025 06:13:08 UTC (Approximate, system time)

## Overview

This document summarizes the system state and context established following the `new_chat_protocol.mdc` as of the date/time above. It incorporates findings from the protocol execution, previous context (`ai_context_2025-04-18_1919.mdc`), and the ongoing conversation regarding `AgentChatPage.tsx` debugging.

## Project Structure & Key Components

*   **Goal:** Agentopia - Web UI (React/Vite/TS) for managing AI agents integrated with Discord, using Supabase (DB, Auth, Functions) and Node.js services (on DO w/ PM2).
*   **Frontend (`src/`):** Entry `src/main.tsx` -> `src/App.tsx` (provides `AuthContext`, `AppRouter`). Key files for current debug: `pages/AgentChatPage.tsx`, `contexts/AuthContext.tsx`, `router/AppRouter.tsx`, `lib/supabase.ts`.
*   **Backend (Supabase `supabase/`):** DB tables (`agents`, `agent_discord_connections`, `user_profiles`, etc.) defined via Migrations (`migrations/`). Functions (`functions/`): `chat`, `manage-discord-worker`, `discord-interaction-handler`, etc.
*   **Backend (Services `services/`):** `worker-manager`, `discord-worker`. Managed by PM2 (`ecosystem.config.js`).
*   **Documentation & Meta:** `README.md`, `docs/index.md`, `docs/context/`, `docs/bugs/`, `logs/`, `.cursor/rules/`.

## Analysis Findings (New Chat Protocol)

*   **Core Files & Schema:** Confirmed understanding aligns with previous context.
*   **API Endpoints/Entry Points:**
    *   UI: `src/main.tsx` (via Vite)
    *   Supabase Functions: HTTP POST to `/functions/v1/<function_name>` (e.g., `chat`) requiring Auth.
    *   Services: Likely internal communication via Supabase or direct calls, plus outbound Discord Gateway.
*   **Logs (`logs/`, `docs/console/logs/`):** Directories are **empty** (except for `logs/README.md`). Logging infrastructure appears missing or non-functional, contradicting previous context notes and violating Rule #2.
*   **Bugs (`docs/bugs/`):** Contains `discord-interaction-handler.md` (log dump), confirming informal bug tracking.

## Current State & Recent Progress

*   **Primary Focus:** Debugging `src/pages/AgentChatPage.tsx`. The component fails to reliably fetch agent data on load due to `useEffect` not re-running when the `agentId` route parameter becomes available.
*   **Last Action:** Implemented "Strategy 1" from the handover brief: modified the data-fetching `useEffect` to use an empty dependency array (`[]`) and a `fetchInProgress` ref guard to trigger fetch on re-renders while preventing simultaneous calls.
*   **Pending Action:** User needs to test `AgentChatPage` after the latest code changes.

## Discrepancies & Potential Issues

*   **Missing Logs:** Critical lack of application logs.
*   **Incorrect Documentation:** `docs/index.md` lists wrong frontend entry point (`page.tsx` vs `main.tsx`).
*   **Informal Bug Tracking:** `docs/bugs/` needs structure.
*   **`AgentChatPage.tsx` Size:** File is at 414 lines, approaching the 500-line limit (PHILOSOPHY #1). Monitor for potential refactoring needs.

## Recommendations for Next Steps

1.  **Complete User Test:** User to test `AgentChatPage.tsx` and report results.
2.  **Analyze Test Results:** Based on user feedback, determine if Strategy 1 worked. If not, proceed to Strategy 2 (investigate router/context) or Strategy 3 (simplify component).
3.  **(High Priority)** **Implement Logging:** Establish proper logging in Supabase Functions and backend services, directing output to `logs/` or `docs/console/logs/`.
4.  **Update Documentation:** Correct `docs/index.md` entry point.
5.  **Formalize Bug Tracking:** Define a template/process for `docs/bugs/`.
6.  **Monitor `AgentChatPage.tsx` Size:** Consider refactoring if complexity increases or line count exceeds ~450.
7.  **Cleanup:** Once `AgentChatPage.tsx` fix is confirmed, remove the `.bak` file.

---
Generated by AI Assistant following `new_chat_protocol.mdc` at Mon 04/21/2025 06:13:08 UTC (Approximate) 