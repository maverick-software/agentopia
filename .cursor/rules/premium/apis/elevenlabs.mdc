---
description:
globs:
alwaysApply: false
---
# ElevenLabs API Implementation SOP

## Standard Operating Procedure for API Integration
**Version:** 1.0  
**Last Updated:** 2024  
**Author:** Digital Oracle Development Team  
**Purpose:** Comprehensive guide for implementing ElevenLabs and other third-party APIs in both local development and cloud production environments.

---

## 🎯 OVERVIEW

This SOP covers two distinct deployment architectures:
- **Local Development:** Using Vite middleware with local SQLite database
- **Cloud Production:** Using Supabase Edge Functions with PostgreSQL database

Both approaches maintain security best practices by keeping API keys server-side only.

---

## 📋 PREREQUISITES

### Required Knowledge
- [ ] Node.js/JavaScript fundamentals
- [ ] RESTful API concepts
- [ ] Environment variable management
- [ ] Database operations (SQLite/PostgreSQL)
- [ ] TypeScript basics

### Required Tools
- [ ] Node.js 18+ installed
- [ ] Supabase CLI installed (`npm install -g supabase`)
- [ ] Git for version control
- [ ] Code editor with TypeScript support

### Required Accounts
- [ ] ElevenLabs API account with valid API key
- [ ] Supabase account (for cloud deployment)
- [ ] GitHub account (for deployment automation)

---

## 🏠 LOCAL DEVELOPMENT SETUP

### 1. Environment Configuration

#### 1.1 Create Environment File
```bash
# Create .env file in project root
touch .env
```

#### 1.2 Add Required Variables
```env
# ElevenLabs Configuration
ELEVENLABS_API_KEY=your_elevenlabs_api_key_here
ELEVENLABS_VOICE_ID=pNInz6obpgDQGcFmaJgB
ELEVENLABS_STABILITY=0.5
ELEVENLABS_SIMILARITY_BOOST=0.75

# Database Configuration
DATABASE_PATH=./database/oracle.db
DATABASE_BACKUP_PATH=./database/backups/

# OpenAI Configuration (if needed)
OPENAI_API_KEY=your_openai_api_key_here

# Development Settings
NODE_ENV=development
PORT=5173
```

#### 1.3 Update .gitignore
```gitignore
# Environment files
.env
.env.local
.env.production

# Database files
*.db
*.sqlite
```

### 2. Middleware Implementation

#### 2.1 Install Dependencies
```bash
npm install node-fetch
npm install --save-dev @types/node-fetch
```

#### 2.2 Create Middleware Structure
```
src/server/
├── elevenLabsMiddleware.js
├── openaiMiddleware.js
├── sqliteMiddleware.js
└── utils/
    ├── apiKeyValidator.js
    └── errorHandler.js
```

#### 2.3 Middleware Template
```javascript
// src/server/middleware-template.js
import fetch from 'node-fetch';

const API_KEY = process.env.YOUR_API_KEY;
const BASE_URL = 'https://api.yourservice.com/v1';

export function createYourServiceMiddleware() {
    return async (req, res, next) => {
        const path = req.path;
        
        // Route filtering
        if (!path.startsWith('/api/yourservice/')) {
            return next();
        }

        // API key validation
        if (!API_KEY) {
            return res.status(500).json({ 
                error: 'API key not configured',
                message: 'YOUR_API_KEY environment variable is required'
            });
        }

        try {
            console.log(`🔄 ${req.method} ${path}`);
            
            // Route handlers
            if (path === '/api/yourservice/endpoint' && req.method === 'GET') {
                await handleGetRequest(req, res);
            } else if (path === '/api/yourservice/endpoint' && req.method === 'POST') {
                await handlePostRequest(req, res);
            } else {
                res.status(404).json({ error: 'Endpoint not found' });
            }
        } catch (error) {
            console.error('❌ API error:', error);
            res.status(500).json({ 
                error: 'API request failed',
                message: error.message 
            });
        }
    };
}
```

#### 2.4 Register Middleware in Vite Config
```javascript
// vite.config.js
import { defineConfig } from 'vite'

function backendMiddleware() {
  return {
    name: 'backend-middleware',
    configureServer(server) {
      server.middlewares.use(async (req, res, next) => {
        if (req.url.startsWith('/api/')) {
          try {
            // Dynamic middleware loading
            if (req.url.startsWith('/api/elevenlabs/')) {
              const { createElevenLabsMiddleware } = await import('./src/server/elevenLabsMiddleware.js');
              const middleware = createElevenLabsMiddleware();
              return middleware(req, res, next);
            }
            
            // Add more middleware as needed
            
            res.status(404).json({ error: 'API endpoint not found' });
          } catch (error) {
            console.error('API Error:', error);
            res.status(500).json({ error: error.message });
          }
          return;
        }
        next();
      });
    }
  };
}

export default defineConfig({
  plugins: [backendMiddleware()],
  // ... rest of config
});
```

### 3. Database Integration (SQLite)

#### 3.1 Create Database Schema
```sql
-- database/schema.sql
CREATE TABLE IF NOT EXISTS api_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    service TEXT NOT NULL,
    endpoint TEXT NOT NULL,
    method TEXT NOT NULL,
    status_code INTEGER,
    response_time INTEGER,
    error_message TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS voice_configs (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    provider TEXT NOT NULL,
    voice_id TEXT NOT NULL,
    settings JSON,
    is_active BOOLEAN DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
```

#### 3.2 Database Middleware
```javascript
// src/server/sqliteMiddleware.js
import Database from 'better-sqlite3';
import path from 'path';

const DB_PATH = process.env.DATABASE_PATH || './database/oracle.db';

export function sqliteMiddleware(req, res, next) {
    const apiPath = req.path;
    
    if (!apiPath.startsWith('/api/admin/')) {
        return next();
    }

    try {
        const db = new Database(DB_PATH);
        
        // Attach database to request object
        req.db = db;
        
        // Handle different admin endpoints
        if (apiPath === '/api/admin/logs' && req.method === 'GET') {
            handleGetLogs(req, res, db);
        } else if (apiPath === '/api/admin/voices' && req.method === 'GET') {
            handleGetVoices(req, res, db);
        } else {
            res.status(404).json({ error: 'Admin endpoint not found' });
        }
        
        db.close();
    } catch (error) {
        console.error('Database error:', error);
        res.status(500).json({ error: 'Database operation failed' });
    }
}
```

---

## ☁️ CLOUD PRODUCTION SETUP (SUPABASE)

### 1. Supabase Project Setup

#### 1.1 Initialize Supabase Project
```bash
# Login to Supabase
supabase login

# Initialize new project
supabase init

# Link to existing project (if applicable)
supabase link --project-ref your-project-id
```

#### 1.2 Database Schema Migration
```sql
-- supabase/migrations/001_initial_schema.sql
CREATE TABLE public.api_logs (
    id SERIAL PRIMARY KEY,
    service TEXT NOT NULL,
    endpoint TEXT NOT NULL,
    method TEXT NOT NULL,
    status_code INTEGER,
    response_time INTEGER,
    error_message TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE public.voice_configs (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    provider TEXT NOT NULL,
    voice_id TEXT NOT NULL,
    settings JSONB,
    is_active BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable Row Level Security
ALTER TABLE public.api_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.voice_configs ENABLE ROW LEVEL SECURITY;

-- Create policies for authenticated users
CREATE POLICY "Allow authenticated users" ON public.api_logs
    FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated users" ON public.voice_configs
    FOR ALL USING (auth.role() = 'authenticated');
```

#### 1.3 Apply Migrations
```bash
supabase db push
```

### 2. Edge Functions Implementation

#### 2.1 Create Edge Function Structure
```bash
# Create ElevenLabs edge function
supabase functions new elevenlabs-api

# Create OpenAI edge function  
supabase functions new openai-api
```

#### 2.2 ElevenLabs Edge Function
```typescript
// supabase/functions/elevenlabs-api/index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const ELEVENLABS_API_KEY = Deno.env.get('ELEVENLABS_API_KEY')
const ELEVENLABS_BASE_URL = 'https://api.elevenlabs.io/v1'

interface RequestBody {
  action: 'synthesize' | 'voices' | 'user';
  text?: string;
  voiceId?: string;
  settings?: {
    stability?: number;
    similarityBoost?: number;
    style?: number;
    speakerBoost?: boolean;
  };
}

serve(async (req) => {
  // CORS headers
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
    'Access-Control-Allow-Methods': 'POST, GET, OPTIONS'
  }

  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Validate API key
    if (!ELEVENLABS_API_KEY) {
      throw new Error('ElevenLabs API key not configured')
    }

    // Initialize Supabase client for logging
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY')!
    const supabase = createClient(supabaseUrl, supabaseKey)

    const { action, text, voiceId, settings } = await req.json() as RequestBody

    let result: any
    const startTime = Date.now()

    switch (action) {
      case 'voices':
        result = await handleGetVoices()
        break
      case 'synthesize':
        if (!text || !voiceId) {
          throw new Error('Text and voiceId are required for synthesis')
        }
        result = await handleSynthesize(text, voiceId, settings)
        break
      case 'user':
        result = await handleGetUser()
        break
      default:
        throw new Error('Invalid action specified')
    }

    // Log the API call
    await logApiCall(supabase, action, req.method, 200, Date.now() - startTime)

    return new Response(JSON.stringify(result), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('ElevenLabs API error:', error)
    
    return new Response(JSON.stringify({ 
      error: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})

async function handleGetVoices() {
  const response = await fetch(`${ELEVENLABS_BASE_URL}/voices`, {
    headers: {
      'Accept': 'application/json',
      'xi-api-key': ELEVENLABS_API_KEY!
    }
  })

  if (!response.ok) {
    throw new Error(`ElevenLabs API error: ${response.status}`)
  }

  return await response.json()
}

async function handleSynthesize(text: string, voiceId: string, settings?: any) {
  const voiceSettings = {
    stability: settings?.stability || 0.5,
    similarity_boost: settings?.similarityBoost || 0.75,
    style: settings?.style || 0.0,
    use_speaker_boost: settings?.speakerBoost || true
  }

  const response = await fetch(`${ELEVENLABS_BASE_URL}/text-to-speech/${voiceId}`, {
    method: 'POST',
    headers: {
      'Accept': 'audio/mpeg',
      'Content-Type': 'application/json',
      'xi-api-key': ELEVENLABS_API_KEY!
    },
    body: JSON.stringify({
      text: text,
      model_id: 'eleven_monolingual_v1',
      voice_settings: voiceSettings
    })
  })

  if (!response.ok) {
    const errorText = await response.text()
    throw new Error(`ElevenLabs synthesis error: ${response.status} ${errorText}`)
  }

  // Convert to base64 for JSON response
  const audioBuffer = await response.arrayBuffer()
  const audioBase64 = btoa(String.fromCharCode(...new Uint8Array(audioBuffer)))
  
  return {
    audioData: audioBase64,
    contentType: 'audio/mpeg'
  }
}

async function handleGetUser() {
  const response = await fetch(`${ELEVENLABS_BASE_URL}/user`, {
    headers: {
      'Accept': 'application/json',
      'xi-api-key': ELEVENLABS_API_KEY!
    }
  })

  if (!response.ok) {
    throw new Error(`ElevenLabs API error: ${response.status}`)
  }

  return await response.json()
}

async function logApiCall(supabase: any, endpoint: string, method: string, statusCode: number, responseTime: number, errorMessage?: string) {
  try {
    await supabase.from('api_logs').insert({
      service: 'elevenlabs',
      endpoint: endpoint,
      method: method,
      status_code: statusCode,
      response_time: responseTime,
      error_message: errorMessage
    })
  } catch (error) {
    console.error('Failed to log API call:', error)
  }
}
```

### 3. Environment Variables (Supabase Dashboard)

#### 3.1 Set Environment Variables in Supabase
```bash
# Set secrets via CLI
supabase secrets set ELEVENLABS_API_KEY=your_api_key_here
supabase secrets set OPENAI_API_KEY=your_openai_key_here

# Or via dashboard: Settings > Edge Functions > Environment Variables
```

#### 3.2 Deploy Edge Functions
```bash
# Deploy all functions
supabase functions deploy

# Deploy specific function
supabase functions deploy elevenlabs-api
```

### 4. Client-Side Integration

#### 4.1 Environment-Aware API Client
```typescript
// src/services/ApiClient.ts
export class ApiClient {
  private baseUrl: string;
  
  constructor() {
    // Detect environment
    this.baseUrl = import.meta.env.PROD 
      ? 'https://your-project.supabase.co/functions/v1'
      : 'http://localhost:5173/api';
  }

  async callElevenLabsAPI(action: string, data?: any) {
    const endpoint = import.meta.env.PROD 
      ? `${this.baseUrl}/elevenlabs-api`
      : `${this.baseUrl}/elevenlabs/${action}`;

    const body = import.meta.env.PROD 
      ? { action, ...data }
      : data;

    const response = await fetch(endpoint, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    });

    if (!response.ok) {
      throw new Error(`API call failed: ${response.status}`);
    }

    return response.json();
  }
}
```

---

## 🔒 SECURITY BEST PRACTICES

### 1. API Key Management
- [ ] Never expose API keys in client-side code
- [ ] Use environment variables for all sensitive data
- [ ] Implement API key rotation procedures
- [ ] Monitor API usage and costs

### 2. Request Validation
- [ ] Validate all incoming request parameters
- [ ] Implement rate limiting
- [ ] Sanitize user inputs
- [ ] Log all API interactions

### 3. Error Handling
- [ ] Never expose internal error details to client
- [ ] Implement comprehensive logging
- [ ] Use structured error responses
- [ ] Monitor error rates and patterns

### 4. Database Security
- [ ] Enable Row Level Security (RLS) on Supabase
- [ ] Use prepared statements for queries
- [ ] Implement data encryption at rest
- [ ] Regular database backups

---

## 📊 MONITORING & LOGGING

### 1. Local Development Logging
```javascript
// src/utils/logger.js
export class ApiLogger {
  static log(service, action, status, duration, error = null) {
    const logEntry = {
      timestamp: new Date().toISOString(),
      service,
      action,
      status,
      duration,
      error
    };
    
    console.log(`📊 API Log:`, logEntry);
    
    // Write to file in development
    if (process.env.NODE_ENV === 'development') {
      // Append to log file
    }
  }
}
```

### 2. Production Monitoring (Supabase)
- [ ] Enable function logs in Supabase dashboard
- [ ] Set up error alerting
- [ ] Monitor function execution time
- [ ] Track API usage patterns

---

## 🚀 DEPLOYMENT CHECKLIST

### Local Development Deployment
- [ ] Environment variables configured
- [ ] Database initialized and migrated
- [ ] All middleware properly registered
- [ ] API endpoints tested
- [ ] Error handling verified

### Cloud Production Deployment
- [ ] Supabase project created
- [ ] Database schema migrated
- [ ] Edge functions deployed
- [ ] Environment variables set
- [ ] API endpoints tested in production
- [ ] Monitoring configured
- [ ] Backup procedures verified

---

## 🔧 TROUBLESHOOTING

### Common Issues

#### 1. API Key Not Working
```
❌ Error: ElevenLabs API key not configured
✅ Solution: 
   - Check .env file for ELEVENLABS_API_KEY
   - Verify API key is valid in ElevenLabs dashboard
   - Restart development server after adding key
```

#### 2. CORS Issues
```
❌ Error: CORS policy blocked request
✅ Solution: 
   - Add proper CORS headers in middleware
   - Configure Supabase edge function CORS
   - Check browser network tab for details
```

#### 3. Database Connection Failed
```
❌ Error: Database operation failed
✅ Solution: 
   - Check database file permissions
   - Verify SQLite database exists
   - Check Supabase connection string
```

#### 4. Edge Function Timeout
```
❌ Error: Function execution timeout
✅ Solution: 
   - Optimize function code
   - Reduce payload size
   - Implement pagination for large datasets
```

---

## 📚 ADDITIONAL RESOURCES

### Documentation Links
- [ElevenLabs API Documentation](https://docs.elevenlabs.io/)
- [Supabase Edge Functions Guide](https://supabase.com/docs/guides/functions)
- [Vite Plugin Development](https://vitejs.dev/guide/api-plugin.html)

### Code Examples Repository
- Local Middleware Examples: `/src/server/examples/`
- Edge Function Templates: `/supabase/functions/templates/`
- Client Integration Patterns: `/src/services/examples/`

### Support Contacts
- Technical Issues: development-team@yourcompany.com
- API Access Issues: api-support@yourcompany.com
- Emergency Contact: on-call@yourcompany.com

---

**Document Control:**
- Review Schedule: Monthly
- Approval Authority: Technical Lead
- Distribution: All Development Team Members
- Version Control: Git repository with tagged releases
