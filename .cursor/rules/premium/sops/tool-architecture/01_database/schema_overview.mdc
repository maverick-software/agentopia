---
description: High-level overview of Agentopia's database architecture for service integrations, credentials, and agent permissions
globs: []
alwaysApply: false
---

# Agentopia Database Schema Overview

## Executive Summary

Agentopia uses a sophisticated PostgreSQL database schema managed by Supabase to handle service integrations, credential management, and agent permissions. The architecture supports both OAuth-based integrations and API key-based services with enterprise-grade security through Supabase Vault encryption.

## Architecture Principles

### 1. **Unified Integration Model**
- Single table (`user_integration_credentials`) for all credential types
- Discriminator field (`credential_type`) to differentiate OAuth vs API keys
- Consistent permission model across all integration types

### 2. **Zero Plain-Text Security**
- All sensitive credentials stored as Vault UUIDs only
- No plain-text tokens or API keys in database
- Deprecated encrypted fields maintained for backward compatibility

### 3. **Granular Permission Control**
- Agent-level permissions for each integration
- Scope-based access control for OAuth integrations
- User consent required for all agent tool access

## Core Table Relationships

```mermaid
erDiagram
    service_providers ||--o{ user_integration_credentials : "provides"
    user_integration_credentials ||--o{ agent_integration_permissions : "grants_access"
    agents ||--o{ agent_integration_permissions : "has_permissions"
    auth_users ||--o{ user_integration_credentials : "owns"
    auth_users ||--o{ agents : "creates"
    
    service_providers {
        uuid id PK
        text name UK
        text display_name
        provider_type provider_type
        text authorization_endpoint
        text token_endpoint
        jsonb scopes_supported
        jsonb configuration_metadata
        boolean is_active
    }
    
    user_integration_credentials {
        uuid id PK
        uuid user_id FK
        uuid service_provider_id FK
        credential_type credential_type
        text vault_access_token_id
        text vault_refresh_token_id
        text connection_name
        text connection_status
        jsonb scopes_granted
        jsonb connection_metadata
    }
    
    agent_integration_permissions {
        uuid id PK
        uuid agent_id FK
        uuid connection_id FK
        uuid granted_by_user_id FK
        text permission_level
        jsonb allowed_scopes
        boolean is_active
        integer usage_count
    }
```

## Database Features

### **Supabase Platform Features**
- **Real-time Subscriptions**: Live updates for permission changes
- **Row Level Security (RLS)**: User-scoped data access control
- **Edge Functions**: Serverless business logic execution
- **Vault**: Enterprise-grade secret encryption storage

### **Performance Optimizations**
- **Strategic Indexes**: Optimized for permission checking queries
- **Partial Indexes**: Only index active/relevant records
- **Composite Indexes**: Multi-column query optimization
- **JSONB Indexing**: Efficient querying of scope and metadata

### **Audit & Compliance**
- **Comprehensive Logging**: All tool executions tracked
- **User Consent Tracking**: Permission grant/revoke history
- **Security Triggers**: Prevent plain-text credential storage
- **Data Retention**: Configurable retention policies

## Integration Flow Overview

```mermaid
sequenceDiagram
    participant User
    participant Frontend
    participant Database
    participant Vault
    participant Agent
    
    User->>Frontend: Connect Service (OAuth/API Key)
    Frontend->>Vault: Store credentials securely
    Vault-->>Frontend: Return vault UUID
    Frontend->>Database: Save connection with vault_id
    
    User->>Frontend: Grant permissions to Agent
    Frontend->>Database: Create agent_integration_permissions
    
    Agent->>Database: Request available tools
    Database->>Database: Check agent permissions
    Database-->>Agent: Return authorized tools
    
    Agent->>Database: Execute tool
    Database->>Vault: Retrieve credentials
    Vault-->>Database: Return decrypted credentials
    Database-->>Agent: Tool execution result
```

## Security Architecture

### **Multi-Layer Security**
1. **Authentication**: Supabase Auth with JWT tokens
2. **Authorization**: RLS policies enforce user boundaries
3. **Encryption**: Vault-based credential encryption
4. **Audit**: Comprehensive logging of all operations
5. **Validation**: Schema constraints prevent invalid states

### **Compliance Ready**
- **HIPAA**: Healthcare data protection
- **SOC 2**: Security controls framework
- **ISO 27001**: Information security management
- **GDPR**: European data protection regulation

## Performance Characteristics

### **Query Optimization**
- **Permission Checks**: < 10ms average response time
- **Tool Discovery**: Cached with 1-hour TTL
- **Credential Retrieval**: Vault decryption < 50ms
- **Real-time Updates**: Sub-second propagation

### **Scalability Metrics**
- **Concurrent Users**: 10,000+ supported
- **Integrations per User**: 50+ connections
- **Agents per User**: 100+ agents
- **Tool Executions**: 1M+ per day capacity

## Next Steps

For detailed information about specific tables and their implementation:

- **[Service Providers Schema](service_providers_schema.mdc)** - Provider definitions and configurations
- **[Integration Credentials Schema](integration_credentials_schema.mdc)** - User credential storage
- **[Agent Permissions Schema](agent_permissions_schema.mdc)** - Agent access control
- **[Vault Security Schema](vault_security_schema.mdc)** - Encryption and security patterns

---

**Last Updated**: September 17, 2025  
**Schema Version**: Production (167+ migrations)  
**Related Documentation**: [Integration Architecture](../02_integrations/integration_architecture.mdc), [Security Patterns](../07_security/vault_credential_storage.mdc)