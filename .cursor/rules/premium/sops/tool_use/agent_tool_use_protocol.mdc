---
description: Comprehensive protocol for implementing tool use in Agentopia agents, covering OAuth integrations, API key management, permissions, and the complete execution flow
globs: []
alwaysApply: false
---

# Agentopia Agent Tool Use Protocol

## Executive Summary

This protocol documents the complete implementation of tool use capabilities for Agentopia agents. The system leverages OpenAI's function calling capabilities combined with a sophisticated permissions-based architecture inspired by the Model Context Protocol (MCP). It supports both OAuth-based integrations (e.g., Gmail, Slack) and API key-based services, providing agents with the ability to perform actions on behalf of users while maintaining strict security and permission controls.

## Table of Contents

1. [Architecture Overview](#architecture-overview)
2. [Core Concepts](#core-concepts)
3. [Database Schema](#database-schema)
4. [Permission System](#permission-system)
5. [Tool Definition & Registration](#tool-definition--registration)
6. [Tool Execution Flow](#tool-execution-flow)
7. [Visual Feedback System](#visual-feedback-system)
8. [JSON-RPC 2.0 Implementation](#json-rpc-20-implementation)
9. [OpenAI Function Calling Integration](#openai-function-calling-integration)
10. [OAuth Integration Flow](#oauth-integration-flow)
11. [API Key Management](#api-key-management)
12. [Error Handling & Recovery](#error-handling--recovery)
13. [Security Considerations](#security-considerations)
14. [Testing & Diagnostics](#testing--diagnostics)
15. [Future Extensions](#future-extensions)

## Architecture Overview

The Agentopia tool use system is built on several key architectural principles:

### 1. **Separation of Concerns**
- **Tool Definition**: Tools are defined with OpenAI-compatible function schemas
- **Permission Management**: Fine-grained OAuth scope-based permissions
- **Tool Execution**: Isolated execution environment with proper error handling
- **Result Delivery**: Structured response formatting for both success and failure cases

### 2. **MCP-Inspired Design**
While not implementing the full MCP specification, Agentopia adopts key MCP concepts:
- **Standardized tool interface** for consistent tool definitions
- **Capability negotiation** through permission checking
- **JSON-RPC-style messaging** for tool execution
- **Resource isolation** between different tool providers

### 3. **Security-First Approach**
- User consent required for all tool permissions
- OAuth tokens encrypted in database using Supabase Vault
- Scope-based permission validation before every tool execution
- Comprehensive audit logging of all tool operations

## Core Concepts

### Tools
Tools are functions that agents can execute to perform actions in external systems. Each tool:
- Has a unique name and description
- Defines input parameters using JSON Schema
- Specifies required OAuth scopes or API permissions
- Returns structured results or error messages

### Permissions
Permissions control which agents can use which tools:
- **OAuth-based**: User grants specific OAuth scopes to agents
- **API key-based**: User provides API keys that agents can use
- **Granular control**: Permissions can be granted/revoked per agent

### Providers
Tool providers are external services that expose functionality:
- **Gmail**: Email operations (send, read, search, manage)
- **Slack**: Messaging and workspace management
- **GitHub**: Repository and code management
- **Custom**: Any service with an API can be integrated

## Database Schema

### Core Tables

#### `oauth_providers`
Stores OAuth provider configurations.
```sql
CREATE TABLE oauth_providers (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT UNIQUE NOT NULL,           -- e.g., 'gmail', 'slack'
  display_name TEXT NOT NULL,          -- e.g., 'Gmail', 'Slack'
  client_id TEXT NOT NULL,             -- OAuth client ID
  auth_url TEXT NOT NULL,              -- OAuth authorization URL
  token_url TEXT NOT NULL,             -- OAuth token exchange URL
  available_scopes JSONB NOT NULL,     -- Array of available OAuth scopes
  icon_url TEXT,                       -- Provider icon for UI
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### `user_oauth_connections`
Links users to their OAuth connections with encrypted tokens.
```sql
CREATE TABLE user_oauth_connections (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  oauth_provider_id UUID REFERENCES oauth_providers(id),
  encrypted_access_token TEXT NOT NULL,    -- Encrypted using Supabase Vault
  encrypted_refresh_token TEXT,            -- Encrypted refresh token
  token_expires_at TIMESTAMPTZ,
  granted_scopes JSONB NOT NULL,           -- Array of granted OAuth scopes
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(user_id, oauth_provider_id)
);
```

#### `agent_oauth_permissions`
Controls which agents have access to which OAuth scopes.
```sql
CREATE TABLE agent_oauth_permissions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  agent_id UUID REFERENCES agents(id) ON DELETE CASCADE,
  user_oauth_connection_id UUID REFERENCES user_oauth_connections(id) ON DELETE CASCADE,
  granted_by_user_id UUID REFERENCES auth.users(id),
  permission_level TEXT CHECK (permission_level IN ('read_only', 'full_access', 'custom')),
  allowed_scopes JSONB NOT NULL,           -- Subset of granted_scopes from connection
  granted_at TIMESTAMPTZ DEFAULT NOW(),
  expires_at TIMESTAMPTZ,
  is_active BOOLEAN DEFAULT true,
  usage_count INTEGER DEFAULT 0,
  last_used_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### `tool_execution_logs`
Comprehensive audit log of all tool executions.
```sql
CREATE TABLE tool_execution_logs (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  agent_id UUID REFERENCES agents(id),
  user_id UUID REFERENCES auth.users(id),
  tool_name TEXT NOT NULL,
  tool_provider TEXT NOT NULL,
  parameters JSONB NOT NULL,
  result_data JSONB,
  success BOOLEAN NOT NULL,
  error_message TEXT,
  execution_time_ms INTEGER,
  quota_consumed INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

### RPC Functions

#### `get_gmail_tools(p_agent_id, p_user_id)`
Returns available Gmail tools based on granted permissions.
```sql
CREATE OR REPLACE FUNCTION get_gmail_tools(
    p_agent_id UUID,
    p_user_id UUID
) RETURNS JSONB AS $$
DECLARE
    v_allowed_scopes JSONB;
    v_tools JSONB = '[]'::jsonb;
BEGIN
    -- Get allowed scopes for agent
    SELECT aop.allowed_scopes INTO v_allowed_scopes
    FROM agent_oauth_permissions aop
    JOIN user_oauth_connections uoc ON uoc.id = aop.user_oauth_connection_id
    JOIN oauth_providers op ON op.id = uoc.oauth_provider_id
    WHERE aop.agent_id = p_agent_id
    AND uoc.user_id = p_user_id
    AND op.name = 'gmail'
    AND aop.is_active = true;
    
    -- Build tools array based on granted scopes
    -- Implementation details...
    
    RETURN v_tools;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
```

## Permission System

### OAuth Scope Management

The permission system uses OAuth scopes to control tool access:

1. **Scope Definition**: Each tool defines required OAuth scopes
2. **User Grant**: Users grant scopes when connecting accounts
3. **Agent Assignment**: Users assign specific scopes to agents
4. **Runtime Validation**: System validates scopes before tool execution

### Permission Flow

```mermaid
sequenceDiagram
    participant User
    participant UI
    participant OAuth Provider
    participant Database
    participant Agent
    
    User->>UI: Connect Gmail Account
    UI->>OAuth Provider: Initiate OAuth Flow
    OAuth Provider->>User: Request Permissions
    User->>OAuth Provider: Grant Permissions
    OAuth Provider->>UI: Return Auth Code
    UI->>Database: Store Connection & Scopes
    
    User->>UI: Grant Gmail Access to Agent
    UI->>Database: Create agent_oauth_permissions
    
    Agent->>Database: Request Available Tools
    Database->>Agent: Return Tools Based on Permissions
```

## Tool Definition & Registration

### Tool Schema Structure

Tools are defined using OpenAI-compatible function schemas:

```typescript
interface MCPTool {
  name: string;
  description: string;
  parameters: {
    type: 'object';
    properties: Record<string, any>;
    required?: string[];
  };
  required_scopes: string[];
}
```

### Gmail Tool Example

```typescript
const GMAIL_MCP_TOOLS = {
  send_email: {
    name: 'send_email',
    description: 'When a user asks to send an email, use this tool.',
    parameters: {
      type: 'object',
      properties: {
        to: {
          type: 'string',
          description: 'Recipient email address',
        },
        subject: {
          type: 'string',
          description: 'Email subject line',
        },
        body: {
          type: 'string',
          description: 'Email body content (plain text)',
        },
        html: {
          type: 'string',
          description: 'Email body content (HTML format)',
        },
        attachments: {
          type: 'array',
          description: 'Email attachments',
          items: {
            type: 'object',
            properties: {
              filename: { type: 'string' },
              content: { type: 'string', description: 'Base64 encoded content' },
              contentType: { type: 'string' },
            },
          },
        },
      },
      required: ['to', 'subject', 'body'],
    },
    required_scopes: ['https://www.googleapis.com/auth/gmail.send'],
  },
  
  read_emails: {
    name: 'read_emails',
    description: 'When a user asks to read their emails, use this tool.',
    parameters: {
      type: 'object',
      properties: {
        query: {
          type: 'string',
          description: 'Gmail search query',
        },
        max_results: {
          type: 'integer',
          description: 'Maximum number of emails to return',
          default: 50,
        },
        include_body: {
          type: 'boolean',
          description: 'Whether to include email body content',
          default: false,
        },
      },
      required: [],
    },
    required_scopes: ['https://www.googleapis.com/auth/gmail.readonly'],
  }
};
```

## Tool Execution Flow

### Complete Flow Diagram

```mermaid
sequenceDiagram
    participant User
    participant Chat UI
    participant Chat Function
    participant FunctionCallingManager
    participant Gmail API
    participant Database
    
    User->>Chat UI: "Send an email to john@example.com"
    Chat UI->>Chat Function: POST /chat
    
    Chat Function->>FunctionCallingManager: getAvailableTools(agentId, userId)
    FunctionCallingManager->>Database: Check agent_oauth_permissions
    Database-->>FunctionCallingManager: Return allowed_scopes
    FunctionCallingManager-->>Chat Function: Return [send_email tool]
    
    Chat Function->>OpenAI: Call with tools array
    OpenAI-->>Chat Function: Request tool call: send_email
    
    Chat Function->>FunctionCallingManager: executeFunction(send_email, params)
    FunctionCallingManager->>Gmail API: POST /gmail-api
    Gmail API-->>FunctionCallingManager: Email sent successfully
    
    FunctionCallingManager->>Database: Log tool execution
    FunctionCallingManager-->>Chat Function: Return success result
    
    Chat Function->>OpenAI: Send tool result
    OpenAI-->>Chat Function: Final response
    
    Chat Function-->>Chat UI: "I've sent the email to john@example.com"
    Chat UI-->>User: Display response with tool indicator
```

### Detailed Steps

1. **User Message Processing**
   ```typescript
   // In chat/index.ts
   const functionCallingManager = new FunctionCallingManager(supabaseClient);
   const availableTools = await functionCallingManager.getAvailableTools(agentId, userId);
   ```

2. **Tool Discovery**
   ```typescript
   // Check permissions and build tool list
   const gmailTools = await this.getGmailTools(agentId, userId);
   ```

3. **OpenAI Integration**
   ```typescript
   const completion = await openai.chat.completions.create({
     model: 'gpt-4',
     messages,
     tools: availableTools.map(tool => ({
       type: 'function',
       function: tool,
     })),
     tool_choice: 'auto',
   });
   ```

4. **Tool Execution**
   ```typescript
   if (toolCalls && toolCalls.length > 0) {
     const functionResults = await Promise.all(
       toolCalls.map(async (toolCall) => {
         return await functionCallingManager.executeFunction(
           agentId,
           userId,
           toolCall.function.name,
           JSON.parse(toolCall.function.arguments)
         );
       })
     );
   }
   ```

5. **Result Processing**
   ```typescript
   const functionResponses = processFunctionCalls(toolCalls, functionResults, functionCallingManager);
   ```

## Visual Feedback System

### UI Components

#### 1. **AIThinkingIndicator**
Shows real-time AI processing states:
- **Thinking**: Initial processing
- **Analyzing Tools**: Checking available tools
- **Executing Tool**: Running the tool
- **Processing Results**: Handling tool output
- **Generating Response**: Creating final message
- **Completed/Failed**: Final states

```typescript
export type AIState = 
  | 'thinking' 
  | 'analyzing_tools' 
  | 'executing_tool' 
  | 'processing_results' 
  | 'generating_response' 
  | 'completed' 
  | 'failed';
```

#### 2. **ToolCallIndicator**
Displays tool execution details:
- Tool name and provider
- Execution status (executing, completed, failed)
- Execution time
- Parameters (expandable)
- Results or error messages

```typescript
interface ToolCall {
  id?: string;
  tool_name: string;
  tool_provider: string;
  parameters: Record<string, any>;
  status: 'pending' | 'executing' | 'completed' | 'failed';
  execution_time_ms?: number;
  error_message?: string;
  result?: any;
  created_at: string;
}
```

#### 3. **ChatMessage Enhancement**
Messages display tool usage indicators:
- Tool execution badges
- Inline tool status
- Expandable tool details

### Visual Flow

1. User sends message → Loading spinner
2. AI starts processing → AIThinkingIndicator appears
3. Tool execution begins → ToolCallIndicator shows "executing"
4. Tool completes → Status updates to "completed"
5. Response generated → Final message with tool badge

## JSON-RPC 2.0 Implementation

### Transport Layer

The system uses WebSocket connections for MCP servers with JSON-RPC 2.0:

```typescript
export class MCPTransport {
  async sendRequest(method: string, params?: any): Promise<any> {
    const id = this.messageIdCounter++;
    const request: JsonRpcRequest = {
      jsonrpc: '2.0',
      id,
      method,
      params,
    };
    
    return new Promise((resolve, reject) => {
      this.pendingRequests.set(id, { resolve, reject, method });
      this.ws.send(JSON.stringify(request));
    });
  }
}
```

### Message Types

#### Request
```json
{
  "jsonrpc": "2.0",
  "id": 42,
  "method": "tools/call",
  "params": {
    "name": "send_email",
    "arguments": {
      "to": "user@example.com",
      "subject": "Hello",
      "body": "Message content"
    }
  }
}
```

#### Response (Success)
```json
{
  "jsonrpc": "2.0",
  "id": 42,
  "result": {
    "success": true,
    "data": {
      "messageId": "msg_123",
      "timestamp": "2025-01-01T12:00:00Z"
    }
  }
}
```

#### Response (Error)
```json
{
  "jsonrpc": "2.0",
  "id": 42,
  "error": {
    "code": -32601,
    "message": "Method not found",
    "data": {
      "method": "unknown_method"
    }
  }
}
```

## OpenAI Function Calling Integration

### Function Schema Conversion

Tools are converted to OpenAI function format:

```typescript
async getAvailableTools(agentId: string, userId: string): Promise<OpenAIFunction[]> {
  const gmailTools = await this.getGmailTools(agentId, userId);
  
  return gmailTools.map(tool => ({
    name: tool.name,
    description: tool.description,
    parameters: tool.parameters,
  }));
}
```

### Function Call Processing

```typescript
// OpenAI returns tool calls
const toolCalls = completion.choices[0].message.tool_calls;

// Execute each tool
const functionResults = await Promise.all(
  toolCalls.map(async (toolCall) => {
    const functionName = toolCall.function.name;
    const parameters = JSON.parse(toolCall.function.arguments);
    
    return await functionCallingManager.executeFunction(
      agentId,
      userId,
      functionName,
      parameters
    );
  })
);

// Format results for OpenAI
const followUpMessages = [
  ...messages,
  {
    role: 'assistant',
    content: completionContent,
    tool_calls: toolCalls,
  },
  ...functionResponses.map(response => ({
    role: 'tool',
    tool_call_id: response.tool_call_id,
    content: response.content,
  })),
];
```

## OAuth Integration Flow

### 1. User Connects Account

```typescript
// supabase/functions/gmail-oauth-initiate
export async function initiateOAuth(userId: string) {
  const authUrl = new URL('https://accounts.google.com/o/oauth2/v2/auth');
  authUrl.searchParams.append('client_id', GMAIL_CLIENT_ID);
  authUrl.searchParams.append('redirect_uri', REDIRECT_URI);
  authUrl.searchParams.append('response_type', 'code');
  authUrl.searchParams.append('scope', GMAIL_SCOPES.join(' '));
  authUrl.searchParams.append('state', generateSecureState(userId));
  authUrl.searchParams.append('access_type', 'offline');
  authUrl.searchParams.append('prompt', 'consent');
  
  return authUrl.toString();
}
```

### 2. Handle OAuth Callback

```typescript
// supabase/functions/gmail-oauth
export async function handleCallback(code: string, state: string) {
  // Verify state
  const userId = verifyState(state);
  
  // Exchange code for tokens
  const tokens = await exchangeCodeForTokens(code);
  
  // Encrypt tokens
  const encryptedAccessToken = await encryptToken(tokens.access_token);
  const encryptedRefreshToken = await encryptToken(tokens.refresh_token);
  
  // Store connection
  await supabase.from('user_oauth_connections').insert({
    user_id: userId,
    oauth_provider_id: gmailProviderId,
    encrypted_access_token: encryptedAccessToken,
    encrypted_refresh_token: encryptedRefreshToken,
    granted_scopes: tokens.scope.split(' '),
    token_expires_at: new Date(Date.now() + tokens.expires_in * 1000),
  });
}
```

### 3. Grant Permissions to Agent

```typescript
// Frontend: AgentEdit component
async function grantOAuthPermissions(agentId: string, connectionId: string, scopes: string[]) {
  const { error } = await supabase.from('agent_oauth_permissions').insert({
    agent_id: agentId,
    user_oauth_connection_id: connectionId,
    granted_by_user_id: user.id,
    permission_level: 'custom',
    allowed_scopes: scopes,
    is_active: true,
  });
}
```

## API Key Management

### Secure Storage

API keys are stored encrypted using Supabase Vault:

```typescript
// Store API key
async function storeAPIKey(userId: string, provider: string, apiKey: string) {
  const keyId = await supabase.rpc('vault.create_secret', {
    secret: apiKey,
    name: `${provider}_api_key_${userId}`,
    description: `API key for ${provider}`,
  });
  
  return keyId;
}

// Retrieve API key
async function getAPIKey(keyId: string) {
  const { data } = await supabase.rpc('vault.reveal_secret', {
    id: keyId,
  });
  
  return data.secret;
}
```

### Usage in Tools

```typescript
// Tool execution with API key
async function executeAPIKeyTool(tool: string, parameters: any, apiKeyId: string) {
  const apiKey = await getAPIKey(apiKeyId);
  
  const response = await fetch(`https://api.${provider}.com/v1/${tool}`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(parameters),
  });
  
  return response.json();
}
```

## Error Handling & Recovery

### Error Types

1. **Permission Errors**
   ```typescript
   if (!hasPermission) {
     return {
       success: false,
       error: 'Agent does not have required permissions for this operation',
       errorCode: 'PERMISSION_DENIED',
     };
   }
   ```

2. **API Errors**
   ```typescript
   try {
     const result = await callExternalAPI(parameters);
     return { success: true, data: result };
   } catch (error) {
     return {
       success: false,
       error: error.message,
       errorCode: 'API_ERROR',
       details: error.response?.data,
     };
   }
   ```

3. **Token Refresh**
   ```typescript
   async function refreshTokenIfNeeded(connectionId: string) {
     const connection = await getConnection(connectionId);
     
     if (connection.token_expires_at < new Date()) {
       const newTokens = await refreshOAuthToken(connection.refresh_token);
       await updateConnectionTokens(connectionId, newTokens);
     }
   }
   ```

### Recovery Strategies

1. **Automatic Retry**: Transient failures are retried with exponential backoff
2. **Token Refresh**: Expired OAuth tokens are automatically refreshed
3. **Graceful Degradation**: Tool unavailability doesn't break the chat
4. **User Notification**: Clear error messages explain what went wrong

### Intelligent Retry System for Interactive Tools

Agentopia implements a sophisticated three-attempt retry mechanism specifically designed for handling interactive tool calls and recoverable errors, particularly useful for MCP (Model Context Protocol) integrations:

#### **Automatic Retry Logic**

```typescript
// Enhanced retry system in TextMessageHandler
const MAX_RETRY_ATTEMPTS = 3;
let retryAttempts = 0;

while (toolsNeedingRetry.length > 0 && retryAttempts < MAX_RETRY_ATTEMPTS) {
  retryAttempts++;
  console.log(`[TextMessageHandler] Retrying ${toolsNeedingRetry.length} MCP tools (attempt ${retryAttempts}/${MAX_RETRY_ATTEMPTS})`);
  
  // Add system guidance for retry
  msgs.push({
    role: 'system',
    content: `The previous tool call(s) need additional information. Please retry with the missing parameters based on the error messages. For document creation, include a 'text' or 'content' parameter with the document body.`
  });
  
  // Retry with enhanced parameters
  const retryCompletion = await router.chat(agentId, msgs, { 
    tools: availableTools,
    tool_choice: 'auto',
    temperature: 0.7,  // Higher temperature for creativity
    maxTokens: 1200 
  });
}
```

#### **Interactive Error Detection**

The system automatically identifies interactive errors that warrant retry attempts:

```typescript
// Check if this is an MCP tool that returned a clarifying question
const isMCPQuestion = !result.success && 
  result.error && 
  (result.error.toLowerCase().includes('question:') || 
   result.error.toLowerCase().includes('what') ||
   result.error.toLowerCase().includes('please provide') ||
   result.error.toLowerCase().includes('missing'));

if (isMCPQuestion) {
  toolDetails.push({
    name: tc.function.name,
    execution_time_ms: Date.now() - started,
    success: false,
    input_params: args,
    output_result: null,
    error: result.error,
    requires_retry: true
  });
}
```

#### **Progressive Enhancement Features**

Each retry attempt includes progressive enhancements:

1. **System Context**: Adds guidance about missing parameters
2. **Temperature Increase**: From 0.5 to 0.7 for more creative parameter generation  
3. **Tool Context**: Maintains awareness of previous attempts
4. **Error Learning**: Uses error messages to guide parameter completion

#### **Retry Benefits**

- **Improved Success Rate**: Tools that initially fail due to missing parameters often succeed on retry
- **Better User Experience**: Reduces need for manual intervention when tools need clarification
- **Intelligent Parameter Discovery**: LLM learns from error messages to provide correct parameters
- **Graceful Degradation**: System continues to function even when some tools require multiple attempts
- **MCP Compatibility**: Handles interactive tool patterns common in MCP servers like Zapier

#### **Implementation Location**

The retry system is implemented in `supabase/functions/chat/processor/handlers.ts` within the `TextMessageHandler.handle()` method. It operates after the initial tool execution phase and before the final response generation.

Key technical features:
- **Maximum 3 attempts** to prevent infinite loops
- **Smart error detection** using keyword matching
- **Context preservation** across retry attempts
- **Detailed logging** for debugging and monitoring
- **Graceful fallback** when retries are exhausted

## Security Considerations

### 1. **Token Security**
- All OAuth tokens encrypted using Supabase Vault
- Tokens never exposed to frontend
- Refresh tokens stored separately

### 2. **Permission Validation**
- Every tool execution validates permissions
- Scope checking at multiple levels
- Audit logging of all operations

### 3. **Rate Limiting**
- Tool executions rate-limited per agent
- Quota tracking for API usage
- Prevents abuse and excessive costs

### 4. **Data Isolation**
- Tools only access data user has granted
- No cross-user data access
- Strict RLS policies on all tables

## Testing & Diagnostics

### Diagnostic Scripts

1. **find_gmail_agents.js**
   ```javascript
   // Lists all agents with Gmail permissions
   const agents = await supabase
     .from('agent_oauth_permissions')
     .select('*, agents(*), user_oauth_connections(*)')
     .eq('user_oauth_connections.oauth_providers.name', 'gmail');
   ```

2. **diagnose_gmail_tools.js**
   ```javascript
   // Detailed diagnostics for specific agent
   async function diagnoseAgent(agentId) {
     // Check permissions
     const permissions = await checkPermissions(agentId);
     
     // Test tool availability
     const tools = await getAvailableTools(agentId);
     
     // Simulate tool execution
     const testResult = await testToolExecution(agentId);
     
     return { permissions, tools, testResult };
   }
   ```

3. **check_oauth_schema.js**
   ```javascript
   // Verifies database schema integrity
   async function checkSchema() {
     const tables = ['oauth_providers', 'user_oauth_connections', 'agent_oauth_permissions'];
     
     for (const table of tables) {
       const columns = await getTableColumns(table);
       console.log(`Table ${table}:`, columns);
     }
   }
   ```

### Common Issues

1. **"I don't have the required Gmail permissions"**
   - Check `allowed_scopes` column exists (not `granted_scopes`)
   - Verify agent_oauth_permissions record is active
   - Run diagnostics script for detailed info

2. **Tools not appearing in chat**
   - Ensure OAuth connection is active
   - Verify oauth_providers entry exists
   - Check chat function logs

3. **Token expiration errors**
   - Implement automatic token refresh
   - Check refresh token validity
   - Monitor token_expires_at field

## Future Extensions

### 1. **Additional Providers**

To add a new provider (e.g., Slack):

1. Add provider to `oauth_providers` table
2. Implement OAuth flow in `supabase/functions/slack-oauth`
3. Define tools in `SLACK_MCP_TOOLS`
4. Add execution logic in `FunctionCallingManager`
5. Create API handler in `supabase/functions/slack-api`

### 2. **Custom Tools**

Support for user-defined tools:

```typescript
interface CustomTool {
  name: string;
  description: string;
  endpoint: string;
  method: 'GET' | 'POST' | 'PUT' | 'DELETE';
  headers?: Record<string, string>;
  parameters: JSONSchema;
  authentication: {
    type: 'api_key' | 'oauth' | 'basic';
    config: any;
  };
}
```

### 3. **Tool Composition**

Allow tools to call other tools:

```typescript
const compositeTools = {
  send_email_with_attachment: {
    name: 'send_email_with_attachment',
    description: 'Upload file and send as email attachment',
    composed_of: ['upload_file', 'send_email'],
    orchestration: async (params) => {
      const fileUrl = await executeUploadFile(params.file);
      return await executeSendEmail({
        ...params,
        attachments: [{ url: fileUrl }],
      });
    },
  },
};
```

### 4. **Advanced Features**

1. **Webhook Support**: Tools that register webhooks for async operations
2. **Batch Operations**: Execute multiple tool calls efficiently
3. **Conditional Execution**: Tools that execute based on conditions
4. **Tool Versioning**: Support multiple versions of the same tool
5. **Cost Tracking**: Track and limit tool usage costs

## Tool Execution Visibility

### Overview

Agentopia provides comprehensive visibility into tool executions to ensure transparency, enable debugging, and build user trust. The system captures and displays every aspect of tool execution from start to finish.

### Components

#### 1. **Real-Time Console Logs**

Component: `src/components/ToolExecutionLogger.tsx`

Features:
- Live execution logs displayed in chat interface
- Color-coded log levels (info, warn, error, success, debug)
- Millisecond-precision timestamps
- Copy/download functionality
- Collapsible/expandable interface
- Full-screen mode for detailed viewing

Event System:
```typescript
// Emit tool execution log
window.dispatchEvent(new CustomEvent('tool-execution-log', {
  detail: {
    level: 'info',
    message: 'Validating Gmail permissions...',
    toolName: 'send_email',
    phase: 'validation'
  }
}));
```

#### 2. **Enhanced Error Messages**

Location: `supabase/functions/chat/function_calling.ts`

Error formatting provides:
- Detailed error descriptions
- Context-specific troubleshooting steps
- Execution timing information
- User-friendly guidance

Example:
```typescript
❌ Failed to execute send_email

**Error Details:**
• Error: Gmail authentication failed. Please reconnect your Gmail account.
• Execution time: 1234ms

**What you can try:**
• Your Gmail authentication may have expired
• Please reconnect your Gmail account in Integrations
```

#### 3. **Tool Execution History**

Component: `src/components/ToolExecutionHistory.tsx`

Persistent storage and display of all tool executions:
- Complete audit trail with filtering capabilities
- Export to CSV for analysis
- Statistics view (success rate, average execution time)
- Detailed parameter and result viewing
- Integration with agent edit interface

#### 4. **Visual Status Indicators**

Component: `src/components/ToolExecutionStatusIndicator.tsx`

Real-time visual feedback during execution:
- Progress bars with percentage completion
- Step-by-step execution tracking
- Provider-specific icons
- Animated effects during active execution
- Elapsed time display

### Backend Logging Infrastructure

#### Database Tables

```sql
-- Tool execution logs
CREATE TABLE tool_execution_logs (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  agent_id UUID REFERENCES agents(id),
  user_id UUID REFERENCES auth.users(id),
  tool_name TEXT NOT NULL,
  tool_provider TEXT NOT NULL,
  parameters JSONB,
  result_data JSONB,
  success BOOLEAN NOT NULL,
  error_message TEXT,
  execution_time_ms INTEGER,
  quota_consumed INTEGER,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Provider-specific logs (e.g., Gmail)
CREATE TABLE gmail_operation_logs (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  agent_id UUID REFERENCES agents(id),
  user_id UUID REFERENCES auth.users(id),
  operation_type TEXT NOT NULL,
  operation_params JSONB,
  operation_result JSONB,
  status TEXT NOT NULL,
  error_message TEXT,
  quota_consumed INTEGER DEFAULT 0,
  execution_time_ms INTEGER,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### Logging Points

1. **Pre-execution**: Tool validation, permission checks
2. **During execution**: API calls, intermediate steps
3. **Post-execution**: Results, errors, timing
4. **System level**: Rate limiting, quota consumption

### Debugging Tools

#### Diagnostic Scripts

```bash
# View detailed Gmail operation logs
node scripts/view_gmail_logs.js <agent_id> [limit]

# Diagnose tool availability
node scripts/diagnose_gmail_tools.js <agent_id>

# Test RPC functions
node scripts/test_gmail_tools_availability.js

# Check OAuth schema
node scripts/check_oauth_schema.js
```

### User Experience Flow

1. **Pre-execution**
   - User sends request to agent
   - AI Thinking Indicator shows "analyzing_tools"
   - Tool validation begins

2. **During execution**
   - Tool Execution Logger displays real-time logs
   - Visual Status Indicator shows progress
   - Step-by-step status updates

3. **Post-execution**
   - Detailed success/error message in chat
   - Complete logs available in console
   - Permanent record in execution history

4. **Historical review**
   - Access via agent edit page
   - Filter and search capabilities
   - Export for analysis

### Implementation Benefits

1. **Transparency**: Users see exactly what their agents are doing
2. **Debugging**: Detailed logs help identify and fix issues quickly
3. **Trust**: Visibility builds confidence in the system
4. **Learning**: Users understand how tools work
5. **Compliance**: Complete audit trail for review

### Future Enhancements

1. **WebSocket streaming**: Real-time backend log streaming
2. **Log aggregation**: Combine logs from multiple sources
3. **Alert system**: Proactive notifications for failures
4. **Performance analytics**: Track tool performance trends
5. **Cost visualization**: Show API usage costs per execution

## Conclusion

The Agentopia Agent Tool Use Protocol provides a comprehensive, secure, and extensible framework for enabling AI agents to interact with external services. By combining OpenAI's function calling with MCP-inspired design principles and robust permission management, the system ensures that agents can perform useful actions while maintaining user control and security.

This protocol serves as the foundation for turning AI agents from passive responders into active assistants capable of taking real-world actions on behalf of users, all while maintaining the highest standards of security, privacy, and user control.
 